<blocks app="Snap! 9.0, https://snap.berkeley.edu" version="2"><palette><category name="Data Structure" color="255,85,215,1"/></palette><block-definition s="Hash Map" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return new dataStructureTyped.HashMap();</l></block><list></list></block></block></script></block-definition><block-definition s="unique from %&apos;items&apos; on %&apos;getkey&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%repRing"></input></inputs><script><block s="doReport"><custom-block s="%txt of $verticalEllipsis %s $verticalEllipsis"><l>values</l><custom-block s="$verticalEllipsis %s $verticalEllipsis with { %mult%s }"><custom-block s="Hash Map"></custom-block><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="%txt : %s"><block s="evaluate"><block var="getkey"/><list><block var="item"/></list></block><block var="item"/></custom-block></autolambda><list><l>item</l></list></block><block var="items"/></block></custom-block></custom-block></block></script></block-definition><block-definition s="Directed Graph" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l></l></list><l>return new dataStructureTyped.DirectedGraph();</l></block><list></list></block></block></script></block-definition><block-definition s="add or replace { %&apos;items&apos; } in $verticalEllipsis %&apos;data structure&apos; $verticalEllipsis" type="command" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%mult%s"></input><input type="%s"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>items</l></list><l>&#xD;//console.log(ds);&#xD;&#xD;if(ds instanceof dataStructureTyped.DirectedGraph) {&#xD;&#xD;for (let i = 0; i &lt; items.contents.length; i++) {&#xD;  kv = items.contents[i];&#xD;  if(kv.contents) {&#xD; if(kv.contents[0]==&apos;__edge__&apos;)&#xD;      ds.addEdge(kv.contents[1],kv.contents[2],kv.contents[3],kv.contents[4]);&#xD;    else&#xD;      ds.addVertex(kv.contents[0],kv.contents[1]);&#xD;  } else {&#xD;    ds.addVertex(kv);&#xD;  }&#xD;}&#xD;&#xD;} else if(ds.set) {&#xD;&#xD;for (let i = 0; i &lt; items.contents.length; i++) {&#xD;  kv = items.contents[i].contents;&#xD;  ds.set(kv[0],kv[1]);&#xD;}&#xD;&#xD;} else {&#xD; throw new Error("Unsupported data structure");&#xD;}</l></block><list><block var="data structure"/><block var="items"/></list></block></block></script></block-definition><block-definition s="$verticalEllipsis %&apos;data structure&apos; $verticalEllipsis with { %&apos;items&apos; }" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%mult%s"></input></inputs><script><block s="doForEach"><l>item</l><block var="items"/><script><custom-block s="add or replace { %mult%s } in $verticalEllipsis %s $verticalEllipsis"><list><block var="item"/></list><block var="data structure"/></custom-block></script></block><block s="doReport"><block var="data structure"/></block></script></block-definition><block-definition s="remove { %&apos;items&apos; } in $verticalEllipsis %&apos;data structure&apos; $verticalEllipsis" type="command" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%mult%s"></input><input type="%s"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>items</l></list><l>&#xD;//console.log(ds);&#xD;&#xD;if(ds instanceof dataStructureTyped.DirectedGraph) {&#xD;&#xD;for (let i = 0; i &lt; items.contents.length; i++) {&#xD;  kv = items.contents[i];&#xD;  if(kv.contents) {&#xD; if(kv.contents[0]==&apos;__edge__&apos;)&#xD;      ds.deleteEdge({src:kv.contents[1],dest:kv.contents[2]});&#xD;    else&#xD;      ds.deleteVertex(kv.contents[0]);&#xD;  } else {&#xD;    ds.deleteVertex(kv);&#xD;  }&#xD;}&#xD;&#xD;} else if(ds.delete) {&#xD;&#xD;for (let i = 0; i &lt; items.contents.length; i++) {&#xD;  kv = items.contents[i]&#xD;  if(kv.contents)&#xD;    ds.delete(kv.contents[0]);&#xD;  else&#xD;    ds.delete(kv);&#xD;}&#xD;&#xD;} else {&#xD; throw new Error("Unsupported data structure");&#xD;}</l></block><list><block var="data structure"/><block var="items"/></list></block></block></script></block-definition><block-definition s="%&apos;key&apos; : %&apos;value&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><block var="key"/><block var="value"/></list></block></block></script></block-definition><block-definition s="# %&apos;item&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="%txt : %s"><custom-block s="hashable %l"><block var="item"/></custom-block><block var="item"/></custom-block></block></script></block-definition><block-definition s="hashable %&apos;data&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations>ca:notaci√≥ textual de _&#xD;</translations><inputs><input type="%l"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="data"/><l><option>list</option></l></block></block><script><block s="doReport"><block var="data"/></block></script><list></list></block><block s="doIf"><block s="reportListIsEmpty"><block var="data"/></block><script><block s="doReport"><l>()</l></block></script><list></list></block><block s="doReport"><block s="reportJoinWords"><list><l>(</l><block s="reportAtomicCombine"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="hashable %l"><l/></custom-block></autolambda><list></list></block><block var="data"/></block><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l></l><l></l></list></block></autolambda><list></list></block></block><l>)</l></list></block></block></script></block-definition><block-definition s="$verticalEllipsis %&apos;data structure&apos; $verticalEllipsis [ %&apos;key&apos; ]" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%txt"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>key</l></list><l>&#xD;//console.log(ds);&#xD;&#xD;if(ds.get) {&#xD;  return ds.get(key);&#xD;} else {&#xD; throw new Error("Unsupported data structure");&#xD;}</l></block><list><block var="data structure"/><custom-block s="key of %s"><block var="key"/></custom-block></list></block></block></script><scripts><script x="264.1666666666667" y="653.1388888888883"><block s="doReport"><l></l></block></script></scripts></block-definition><block-definition s="is %&apos;key&apos; in $verticalEllipsis %&apos;data structure&apos; $verticalEllipsis ?" type="predicate" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>key</l></list><l>&#xD;//console.log(ds);&#xD;&#xD;if(ds.get) {&#xD;  return ds.has(key);&#xD;} else {&#xD; throw new Error("Unsupported data structure");&#xD;}</l></block><list><block var="data structure"/><custom-block s="key of %s"><block var="key"/></custom-block></list></block></block></script></block-definition><block-definition s="%&apos;requested&apos; of $verticalEllipsis %&apos;data structure&apos; $verticalEllipsis" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%txt"><options>key and values&#xD;keys&#xD;values&#xD;edges&#xD;topological sort</options></input><input type="%s"></input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>requested</l></list><l>&#xD;function listify(x) {&#xD;  console.log(x);&#xD;  if(x === undefined)&#xD;    return undefined;&#xD;  else if (x.contents)&#xD;    return x;&#xD;  else if(x instanceof dataStructureTyped.DirectedEdge)&#xD;    return new List([listify(x.src),listify(x.dest),listify(x.weight),listify(x.value)]);&#xD;  else if(x.key)&#xD;    return new List([listify(x.key),listify(x.value)]);&#xD;  else if(typeof x === &apos;object&apos;)&#xD;    return new List(Array.from(x, y =&gt; listify(y)));&#xD;  else&#xD;    return x;&#xD;}&#xD;&#xD;if(requested == "key and values" &amp;&amp; ds.entries)&#xD;  return listify(ds.entries());&#xD;else if(requested == "keys" &amp;&amp; ds.keys)&#xD;  return listify(ds.keys());&#xD;else if(requested == "values" &amp;&amp; ds.values)&#xD;  return listify(ds.values());&#xD;else if(requested == "edges" &amp;&amp; ds.edgeSet)&#xD;  return listify(ds.edgeSet());&#xD;else if(requested == "topological sort" &amp;&amp; ds.topologicalSort)&#xD;  return listify(ds.topologicalSort());&#xD;else&#xD; throw new Error("Unsupported &apos;"+requested+"&apos;");&#xD;</l></block><list><block var="data structure"/><block var="requested"/></list></block></block></script></block-definition><block-definition s="key of %&apos;item&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="reportIfElse"><block s="reportIsA"><block var="item"/><l><option>list</option></l></block><block s="reportListItem"><l>1</l><block var="item"/></block><block var="item"/></block></block></script></block-definition><block-definition s="value of %&apos;item&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block s="reportIfElse"><block s="reportIsA"><block var="item"/><l><option>list</option></l></block><block s="reportListItem"><l>2</l><block var="item"/></block><block var="item"/></block></block></script></block-definition><block-definition s="edge %&apos;from&apos; $arrowRight %&apos;to&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><l>__edge__</l><custom-block s="key of %s"><block var="from"/></custom-block><custom-block s="key of %s"><block var="to"/></custom-block></list></block></block></script></block-definition><block-definition s="edge %&apos;from&apos; $arrowRight %&apos;weight&apos; $arrowRight %&apos;to&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%n">1</input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><l>__edge__</l><custom-block s="key of %s"><block var="from"/></custom-block><custom-block s="key of %s"><block var="to"/></custom-block><block var="weight"/></list></block></block></script></block-definition><block-definition s="edge %&apos;from&apos; $arrowRight %&apos;weight&apos; $arrowRight %&apos;to&apos; %&apos;data&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%n">1</input><input type="%s"></input><input type="%l"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><l>__edge__</l><custom-block s="key of %s"><block var="from"/></custom-block><custom-block s="key of %s"><block var="to"/></custom-block><block var="weight"/><block var="data"/></list></block></block></script></block-definition><block-definition s="dijkstra $verticalEllipsis %&apos;data structure&apos; $verticalEllipsis %&apos;from&apos; $arrowRight %&apos;to&apos; / paths %&apos;genPaths&apos;" type="reporter" category="Data Structure"><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input><input type="%b">false</input></inputs><script><block s="doApplyExtension"><l>src_load(url)</l><list><l>libraries/data-structure-typed.js</l></list></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ds</l><l>from</l><l>to</l><l>genPaths</l></list><l>&#xD;function listify(x) {&#xD;  if(x === undefined)&#xD;    return undefined;&#xD;  else if (x.contents)&#xD;    return x;&#xD;  else if(x.key)&#xD;    return new List([listify(x.key),listify(x.value)]);&#xD;  else if(typeof x === &apos;object&apos;)&#xD;    return new List(Array.from(x, y =&gt; listify(y)));&#xD;  else&#xD;    return x;&#xD;}&#xD;&#xD;function readKey(x) {&#xD;  console.log(x);&#xD;  if(x.contents)&#xD;    return x.contents[0];&#xD;  else&#xD;    return x;&#xD;}&#xD;&#xD;if(ds instanceof dataStructureTyped.DirectedGraph) {&#xD;&#xD;let result = ds.dijkstra(&#xD;  readKey(from),&#xD;  readKey(to),&#xD;  true,&#xD;  genPaths&#xD;);&#xD;console.log(result);&#xD;var sresult = [&#xD;  listify(result.distMap),&#xD;  result.minDist,&#xD;  listify(result.preMap),&#xD;  listify(result.seen)&#xD;];&#xD;if(genPaths)&#xD;  sresult = sresult.concat([&#xD;    listify(result.minPath),&#xD;    listify(result.paths)&#xD;  ]);&#xD;return new List(sresult);&#xD;&#xD;&#xD;} else {&#xD; throw new Error("Unsupported data structure");&#xD;}</l></block><list><block var="data structure"/><block var="from"/><block var="to"/><block var="genPaths"/></list></block></block></script></block-definition></blocks>